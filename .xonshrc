# Xonsh setting file

# Prompt
$PROMPT = '{INTENSE_GREEN}{user}:{INTENSE_BLUE}{cwd_base}{NO_COLOR}$ '
# if _.rtn:
#   $PROMPT = '{INTENSE_GREEN}{user}:{INTENSE_BLUE}{cwd_base}{INTENSE_RED}$ {NO_COLOR}'

# History
$HISTCONTROL = "ignoredups, ignoreerr"

# Completions
# $UPDATE_COMPLETIONS_ON_KEYPRESS = True
$COMPLETION_CONFIRM = False
$CASE_SENSITIVE_COMPLETIONS = False
$COMPLETION_QUERY_LIMIT = 20
$COMPLETIONS_MENU_ROWS = 5
$SUBSEQUENCE_PATH_COMPLETION = True
$FUZZY_PATH_COMPLETION = False
$AUTO_SUGGEST = True
# BASHの補完機能をそのまま利用するための
# defaultでは以下、tupleを指定する
$BASH_COMPLETIONS = ('/usr/share/bash-completion/bash_completion', )

$SUGGEST_COMMANDS = True
$SUGGEST_MAX_NUM = 5
$SUGGEST_THRESHOLD = 3

$XONSH_CACHE_EVERYTHING = False



# Aliases
aliases["ls"] = 'exa'
aliases["la"] = 'ls -a'
aliases["ll"] = 'ls -lha'
aliases["vi"] = 'nvim'
aliases["vim"] = 'nvim'
aliases["n"] = 'nvim'
aliases["e"] = 'emacs-26.2'
aliases["br"] = 'nvim ~/.bashrc'
aliases["xr"] = 'nvim ~/.xonshrc'
aliases["bp"] = 'nvim ~/.bash_profile'
aliases["bf"] = 'nvim ~/.bash_functions'
aliases["mkdir"] = 'mkdir -p'
aliases["nvr"] = 'vim ~/.config/nvim/init.vim'
aliases["dein"] = 'vim ~/.config/nvim/dein/.dein.toml'
aliases["deinlazy"] = 'vim ~/.config/nvim/dein/.dein_lazy.toml'
aliases["sbp"] = 'source ~/.bash_profile'
aliases["sbr"] = 'source ~/.bashrc'
aliases["sbf"] = 'source ~/.bash_functions'
aliases["rename"] = 'rename -v'
aliases["diff"] = 'icdiff -U 1 --line-number'
aliases["cat"] = 'bat'
aliases["ssh-pubkeygen"] = 'ssh-keygen -yf'
aliases["fd"] = 'fd -H'
aliases["rg"] = 'rg --no-ignore'
aliases["psfind"] = 'ps aux | fzf'
aliases["lame"] = 'lame -b 192'
aliases["vimdiff"] = 'nvim -d'
aliases["duc"] = 'du -d 1 -ah | sort -h'
aliases["wcj"] = 'wc -m'
aliases["mv"] = 'mv -i'
aliases["cp"] = 'cp -i'
aliases["fzf"] = 'fzf --reverse'
aliases["cl"] = 'clear'
aliases["py"] = 'python3'
aliases["bpy"] = 'bpython'
aliases["nimc"] = 'nim c'
aliases["nimcd"] = 'nim c -d:release'
aliases["nimcr"] = 'nim c -r --verbosity:0'
aliases["nimi"] = 'nim secret'
aliases["rc"] = 'rustc'
aliases["lua"] = 'lua5.3'
aliases["luac"] = 'luac5.3'
aliases["rb"] = 'ruby'
aliases["buninstall"] = 'bundle install'
aliases["ocaml"] = 'rlwrap ocaml'
aliases["docker"] = 'docker'
aliases["drun"] = 'docker run'
aliases["dps"] = 'docker ps'
aliases["dl"] = 'docker ps -l -q'
aliases["dbuild"] = 'docker build'
aliases["dimages"] = 'docker images'
aliases["dockerc"] = 'docker-compose'
aliases["dcbuild"] = 'docker-compose build'
aliases["dcup"] = 'docker-compose up -d'
aliases["dcps"] = 'docker-compose ps'
aliases["dclog"] = 'docker-compose logs'
aliases["g"] = 'git'
aliases["ga"] = 'git add'
aliases["gcm"] = 'git commit -m'
aliases["gl"] = 'git log'
aliases["gs"] = 'git status'
aliases["gd"] = 'git diff'
aliases["gdt"] = 'git difftool'
aliases["gcl"] = 'git clone'
aliases["gg"] = 'git log --graph --pretty=oneline'
aliases["gch"] = 'git checkout'
aliases["gb"] = 'git branch'
aliases["gbrm"] = 'git brand --delete'
aliases["gf"] = 'git fetch'
aliases["gpr"] = 'git pull --rebase'
aliases["gfp"] = 'git fetch && git pull'
aliases["gst"] = 'git stash'
aliases["gsp"] = 'git stash pop'
aliases["al"] = ':'
aliases["a"] = ':'
aliases[".s"] = 'ls'
aliases["claer"] = "clear"
aliases["im"] = 'vim'

# 履歴をpecoに流す
# https://qiita.com/riktor/items/4a90b4e125cd091a9d07
# pecoのinstall : https://qiita.com/ngyuki/items/94a7e638655d9910971b
import json
from collections import OrderedDict
from operator import itemgetter
def get_history(session_history=None, return_list=False):
    hist_dir = __xonsh_env__['XONSH_DATA_DIR']
    files = [ os.path.join(hist_dir,f) for f in os.listdir(hist_dir)
              if f.startswith('xonsh-') and f.endswith('.json') ]
    file_hist = [ json.load(open(f))['data']['cmds'] for f in files ]
    cmds = [ ( c['inp'].replace('\n', ''), c['ts'][0] )
                 for cmds in file_hist for c in cmds if c]
    cmds.sort(key=itemgetter(1))
    cmds = [ c[0] for c in cmds[::-1] ]
    if session_history:
        cmds.extend(session_history)
    # dedupe
    zip_with_dummy = list(zip(cmds, [0] * len(cmds)))[::-1]
    cmds = list(OrderedDict(zip_with_dummy).keys())[::-1]
    if return_list:
        return cmds
    else:
        return '\n'.join(cmds)

# gc
import gc
def _gc(args, stdin=None):
    gc.collect()
aliases['gc'] = _gc
